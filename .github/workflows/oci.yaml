---
name: Release Rulesfile
on:
  push:
    branches:
      - main

jobs:
  Release-Rulesfile:
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: write
      packages: write

    env:
      # Only one ruleset file for our demo
      RULESET_FILE: custom-falco-rules.yaml
      # Used to setup Auth and OCI artifact location
      OCI_REGISTRY: ghcr.io
      # Assuming we are in the main branch, our OCI artifact will
      # look something like ghcr.io/user/repo/custom-rules:main
      OCI_ARTIFACT_NAME: custom-rules
      OCI_ARTIFACT_VERSION: ${{ github.ref_name }}

    steps:

      - name: Checkout Falcoctl Repo
        uses: actions/checkout@v3
        with:
          repository: falcosecurity/falcoctl
          ref: main
          path: tools/falcoctl

      - name: Setup Golang
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'
          cache-dependency-path: tools/falcoctl/go.sum

      - name: Build falcoctl
        run: make
        working-directory: tools/falcoctl

      - name: cp falcoctl
        run: cp tools/falcoctl/falcoctl /opt

      - name: Checkout Rules Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      # Bump the tag
      - name: Get latest tag
        id: get_tag
        run: |
          latest=$(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          [[ -z ${latest} ]] && (echo "latest_tag=0.0.1" >> "$GITHUB_OUTPUT") || (echo "latest_tag=$latest" >> "$GITHUB_OUTPUT")

      - name: Calculate new version
        id: bump
        run: |
          tag="${{ steps.get_tag.outputs.latest_tag }}"
          # Remove "v" if present
          tag="${tag#v}"
          IFS='.' read -r major minor patch <<< "$tag"
          new_tag="$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "major_tag_version=$major" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        run: |
          git tag "${{ steps.bump.outputs.new_tag }}"
          git push origin "${{ steps.bump.outputs.new_tag }}"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          name: Release ${{ steps.bump.outputs.new_tag }}
          draft: false
          prerelease: false
          files: rules/*.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload OCI artifacts to GitHub packages
        run: |
             /opt/falcoctl registry push \
             --config /dev/null \
             --type rulesfile \
             --version ${{ steps.bump.outputs.new_tag }} \
             ${OCI_REGISTRY}/${GITHUB_REPOSITORY}/${OCI_ARTIFACT_NAME}:${{ steps.bump.outputs.new_tag }} \
             rules/${RULESET_FILE}             

             # push major. for now it has to be {major}.0.0 because of https://github.com/falcosecurity/falcoctl/issues/815
             /opt/falcoctl registry push \
             --config /dev/null \
             --type rulesfile \
             --version ${{ steps.bump.outputs.major_tag_version }} \
             ${OCI_REGISTRY}/${GITHUB_REPOSITORY}/${OCI_ARTIFACT_NAME}:${{ steps.bump.outputs.major_tag_version }}.0.0 \
             rules/${RULESET_FILE}
        env:
          FALCOCTL_REGISTRY_AUTH_BASIC: ${{ env.OCI_REGISTRY }},${{ github.repository_owner }},${{ secrets.GITHUB_TOKEN }}
